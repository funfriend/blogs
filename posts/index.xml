<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Give me five</title>
    <link>/posts/</link>
    <description>Recent content in Blog on Give me five</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Dec 2018 21:33:22 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TiDB 慢 SQL 收集和监控</title>
      <link>/posts/how-to-monitor-tidb-slow-query/</link>
      <pubDate>Sun, 16 Dec 2018 21:33:22 +0000</pubDate>
      
      <guid>/posts/how-to-monitor-tidb-slow-query/</guid>
      <description>本文介绍了一种如何收集并监控 TiDB 慢 SQL 的方法。 首先给出了收集的整体流程图。 然后具体说明了每一步涉及的主要功能以及实现方式。 最后给出了几个应该关注的监控点。
流程图 TiDB 将慢 SQL 日志输出到文件中；filebeat 收集这些日志，发送到 Kakfa； 然后通过一个解析慢 SQL 的 consumer 程序，将解析后的结构数据，写入到 InfluxDB； 最终用 Grafana 来展示和监控慢 SQL。
TiDB 慢日志配置 TiDB 有两个选项用来配置慢 SQL 日志：
# Stores slow query log into separated files. slow-query-file = &amp;#34;&amp;#34; # Queries with execution time greater than this value will be logged. (Milliseconds) slow-threshold = 300 也可以直接通过命令行参数 `&amp;ndash;log-slow-query** 指定慢SQL 日志文件位置，优先级比配置文件高。
默认是不配置的，慢 SQL 日志会和其他日志一起输出。
配置完成之后，慢 SQL 日志会记录到单独的日志文件中，比如 tidb_slow_query.log。</description>
    </item>
    
    <item>
      <title>再见，2017</title>
      <link>/posts/goodbye-2017/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/goodbye-2017/</guid>
      <description> 以前度过一年的时候，好像很少想去写总结，今年倒是有很强的意愿。 可能是因为工作第二年，感触更深了的缘故。 梳理梳理也是好的，老了，时间总是过的很快，不回想回想，总感觉老的更快了。
离开北京 我是3月下旬和小boss沟通辞职的事情的。 干的实在不是很开心，所以想尽快的离开目前的环境。 去杭州找了两次工作，面了几家公司，说实话杭州的技术氛围比北京还是差了不少。 因为不想多面，所以没多久就选择来了挖财。 虽然从薪水上和技术上，比之前司，没有什么优势，但不失为一个好去处。
4月份从北京辞职，约了5月初来杭州入职，期间的20多天，把研究生时期欠下的学车债给还了。 报的东方时尚速成班，每天上下午各几个小时，第一次练完下车后，直接蹲到了地上。 学车还是累的。虽然拿了驾照，但上路还是心有害怕的。 今年的目标之一就是克服障碍，成为一个合格的司机。
新环境 来杭州的前几个星期，暂时寄宿在女朋友家里。 花了一两周时间找房子，最后和一个在豆瓣上认识的朋友一起合租了个三居室，其中一居之后租给了别人。
房租，杭州还是便宜的，之前在北京还不觉得。说起吃饭上，杭州的餐馆种类不如北京多，性价比也不如，这一点倒是有些不习惯。
新公司做的事情，有些出乎意料。
最开始想做高性能高并发的 web 服务，后来做的确是 phoenix、 hbase 相关的事情。 慢慢的入了数据库的坑。不过这也是我之前就感兴趣的领域，干起来挺开心。
今年的计划是保证现有业务稳定的情况下，推进 newsql 的落地。还是蛮期待能得到 boss 更多的支持。尚不明确的是今年公司的具体规划会不会导致我的这个想法破产。
自身变化 生活上的话，确实是感觉自己老了，人变得憋闷了。这一点确是不好。
游泳一直还坚持着，没有发福的厉害。庆幸旁边有一些喜欢游泳的同事。 今年要加强游泳的频率，同时拓展其他运动，比如说篮球。
写一写今年对自己的要求吧（除了上面的一些）：
 和女朋友在杭州买房，争取上半年完成。 工作上能升一级，加薪 20%。 看完 tidb 的代码，成为 contributor。 去一趟湾湾，或者日本，或者泰国。 了解一些区块链的知识。  </description>
    </item>
    
    <item>
      <title>关于 Y Combinator</title>
      <link>/posts/about-ycombinator/</link>
      <pubDate>Tue, 14 Oct 2014 22:59:26 +0000</pubDate>
      
      <guid>/posts/about-ycombinator/</guid>
      <description>我对 Y Combinator 的兴趣，源自于王垠的一篇讲丘奇和图灵的文章，还有刘未鹏的 康托尔、哥德尔、图灵，永恒的金色对角线。
当然，网络上有很多关于 Y Combinator 的东西，个人比较推荐：
 explanation from Mike Vanier，写的十分通俗易懂。 PLLC 这本书也有详细的推导过程。（推荐前几章，我只看了前几章&amp;hellip;）  Y Combinator for Lazy Evaluation  关于 Evaluation 的概念，参见 wiki - Evaluation Strategy
 (define Y (lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x)))))) ; for a given function f (which is a non-recursive function like almost-factorial), ; the corresponding recursive function can be obtained ; first by computing (lambda (x) (f (x x))), ; and then applying this lambda expression to itself.</description>
    </item>
    
  </channel>
</rss>